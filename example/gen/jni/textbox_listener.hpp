// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from example.djinni

#pragma once

#include "djinni_support.hpp"
#include "textbox_listener.hpp"

namespace djinni_generated {

class TextboxListener final : ::djinni::JniInterface<::TextboxListener, TextboxListener> {
public:
    using CppType = std::shared_ptr<::TextboxListener>;
    using JniType = jobject;

    using Boxed = TextboxListener;

    ~TextboxListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<TextboxListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return {jniEnv, ::djinni::JniClass<TextboxListener>::get()._toJava(jniEnv, c)}; }

private:
    TextboxListener();
    friend ::djinni::JniClass<TextboxListener>;
    friend ::djinni::JniInterface<::TextboxListener, TextboxListener>;

    class JavaProxy final : ::djinni::JavaProxyCacheEntry, public ::TextboxListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void update(const ::ItemList & items) override;

    private:
        using ::djinni::JavaProxyCacheEntry::getGlobalRef;
        friend ::djinni::JniInterface<::TextboxListener, ::djinni_generated::TextboxListener>;
        friend ::djinni::JavaProxyCache<JavaProxy>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("TextboxListener") };
    const jmethodID method_update { ::djinni::jniGetMethodID(clazz.get(), "update", "(LItemList;)V") };
};

}  // namespace djinni_generated
