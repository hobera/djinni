// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from example.djinni

#include "test_interface.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

TestInterface::TestInterface() : ::djinni::JniInterface<::TestInterface, TestInterface>() {}

TestInterface::~TestInterface() = default;

TestInterface::JavaProxy::JavaProxy(JniType j) : JavaProxyCacheEntry(j) { }

TestInterface::JavaProxy::~JavaProxy() = default;

std::unordered_set<std::string> TestInterface::JavaProxy::get_set() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::TestInterface>::get();
    auto jret = jniEnv->CallObjectMethod(getGlobalRef(), data.method_getSet);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Set<::djinni::String>::toCpp(jniEnv, jret);
}
std::vector<std::string> TestInterface::JavaProxy::get_list() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::TestInterface>::get();
    auto jret = jniEnv->CallObjectMethod(getGlobalRef(), data.method_getList);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::List<::djinni::String>::toCpp(jniEnv, jret);
}
std::optional<int32_t> TestInterface::JavaProxy::get_int_ref() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::TestInterface>::get();
    auto jret = jniEnv->CallObjectMethod(getGlobalRef(), data.method_getIntRef);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Optional<std::optional, ::djinni::I32>::toCpp(jniEnv, jret);
}
std::optional<std::string> TestInterface::JavaProxy::get_string_ref() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::TestInterface>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(getGlobalRef(), data.method_getStringRef);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Optional<std::optional, ::djinni::String>::toCpp(jniEnv, jret);
}

}  // namespace djinni_generated
