// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from duration.djinni

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class TestDuration {
    public static native String hoursString(java.time.Duration dt);

    public static native String minutesString(java.time.Duration dt);

    public static native String secondsString(java.time.Duration dt);

    public static native String millisString(java.time.Duration dt);

    public static native String microsString(java.time.Duration dt);

    public static native String nanosString(java.time.Duration dt);

    public static native java.time.Duration hours(int count);

    public static native java.time.Duration minutes(int count);

    public static native java.time.Duration seconds(int count);

    public static native java.time.Duration millis(int count);

    public static native java.time.Duration micros(int count);

    public static native java.time.Duration nanos(int count);

    public static native java.time.Duration hoursf(double count);

    public static native java.time.Duration minutesf(double count);

    public static native java.time.Duration secondsf(double count);

    public static native java.time.Duration millisf(double count);

    public static native java.time.Duration microsf(double count);

    public static native java.time.Duration nanosf(double count);

    public static native java.time.Duration box(long count);

    public static native long unbox(java.time.Duration dt);

    private static final class CppProxy extends TestDuration
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }
    }
}
