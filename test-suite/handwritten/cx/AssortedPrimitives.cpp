// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from primtypes.djinni

#include "AssortedPrimitives.h"  // my header
#include "translation.h"

namespace System { namespace Cxns {


::cppns::AssortedPrimitives AssortedPrimitives::toCpp() {
    return ::cppns::AssortedPrimitives(
        transform<bool, bool>()(B),
        transform<int8_t, int8_t>()(Eight),
        transform<int16_t, int16_t>()(Sixteen),
        transform<int32_t, int32_t>()(Thirtytwo),
        transform<int64_t, int64_t>()(Sixtyfour),
        transform<float, float>()(Fthirtytwo),
        transform<double, double>()(Fsixtyfour),
        transform<std::experimental::optional<bool>, BoolRef^>()(OB),
        transform<std::experimental::optional<int8_t>, ByteRef^>()(OEight),
        transform<std::experimental::optional<int16_t>, ShortRef^>()(OSixteen),
        transform<std::experimental::optional<int32_t>, IntRef^>()(OThirtytwo),
        transform<std::experimental::optional<int64_t>, LongRef^>()(OSixtyfour),
        transform<std::experimental::optional<float>, FloatRef^>()(OFthirtytwo),
        transform<std::experimental::optional<double>, DoubleRef^>()(OFsixtyfour));
}

AssortedPrimitives^ AssortedPrimitives::fromCpp(const ::cppns::AssortedPrimitives& value) {
    AssortedPrimitives^ ret = ref new AssortedPrimitives();
    ret->B = transform<bool, bool>()(value.b);
    ret->Eight = transform<int8_t, int8_t>()(value.eight);
    ret->Sixteen = transform<int16_t, int16_t>()(value.sixteen);
    ret->Thirtytwo = transform<int32_t, int32_t>()(value.thirtytwo);
    ret->Sixtyfour = transform<int64_t, int64_t>()(value.sixtyfour);
    ret->Fthirtytwo = transform<float, float>()(value.fthirtytwo);
    ret->Fsixtyfour = transform<double, double>()(value.fsixtyfour);
    ret->OB = transform<std::experimental::optional<bool>, BoolRef^>()(value.o_b);
    ret->OEight = transform<std::experimental::optional<int8_t>, ByteRef^>()(value.o_eight);
    ret->OSixteen = transform<std::experimental::optional<int16_t>, ShortRef^>()(value.o_sixteen);
    ret->OThirtytwo = transform<std::experimental::optional<int32_t>, IntRef^>()(value.o_thirtytwo);
    ret->OSixtyfour = transform<std::experimental::optional<int64_t>, LongRef^>()(value.o_sixtyfour);
    ret->OFthirtytwo = transform<std::experimental::optional<float>, FloatRef^>()(value.o_fthirtytwo);
    ret->OFsixtyfour = transform<std::experimental::optional<double>, DoubleRef^>()(value.o_fsixtyfour);
    return ret;
}

bool AssortedPrimitives::Equals(AssortedPrimitives^ rhs) {
    return this->B == rhs->B &&
           this->Eight == rhs->Eight &&
           this->Sixteen == rhs->Sixteen &&
           this->Thirtytwo == rhs->Thirtytwo &&
           this->Sixtyfour == rhs->Sixtyfour &&
           this->Fthirtytwo == rhs->Fthirtytwo &&
           this->Fsixtyfour == rhs->Fsixtyfour &&
           this->OB == rhs->OB &&
           this->OEight == rhs->OEight &&
           this->OSixteen == rhs->OSixteen &&
           this->OThirtytwo == rhs->OThirtytwo &&
           this->OSixtyfour == rhs->OSixtyfour &&
           this->OFthirtytwo == rhs->OFthirtytwo &&
           this->OFsixtyfour == rhs->OFsixtyfour;
}

} }  // namespace System::Cxns
