// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from derivings.djinni

#pragma once

#include "djinni_support.hpp"
#include "record_with_derivings.hpp"

namespace jnins {

class RecordWithDerivings final {
public:
    using CppType = ::cppns::RecordWithDerivings;
    using JniType = jobject;

    using Boxed = RecordWithDerivings;

    ~RecordWithDerivings();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    RecordWithDerivings();
    friend ::djinni::JniClass<RecordWithDerivings>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("RecordWithDerivings") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(ILjava/lang/String;)V") };
    const jfieldID field_key1 { ::djinni::jniGetFieldID(clazz.get(), "key1", "I") };
    const jfieldID field_key2 { ::djinni::jniGetFieldID(clazz.get(), "key2", "Ljava/lang/String;") };
};

}  // namespace jnins
