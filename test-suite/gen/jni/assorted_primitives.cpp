// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from primtypes.djinni

#include "assorted_primitives.hpp"  // my header
#include "Marshal.hpp"

namespace jnins {

AssortedPrimitives::AssortedPrimitives() = default;

AssortedPrimitives::~AssortedPrimitives() = default;

auto AssortedPrimitives::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<AssortedPrimitives>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c.b)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.eight)),
                                                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c.sixteen)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.thirtytwo)),
                                                           ::djinni::get(::djinni::I64::fromCpp(jniEnv, c.sixtyfour)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.fthirtytwo)),
                                                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c.fsixtyfour)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::Bool>::fromCpp(jniEnv, c.o_b)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::I8>::fromCpp(jniEnv, c.o_eight)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::I16>::fromCpp(jniEnv, c.o_sixteen)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::I32>::fromCpp(jniEnv, c.o_thirtytwo)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::I64>::fromCpp(jniEnv, c.o_sixtyfour)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::F32>::fromCpp(jniEnv, c.o_fthirtytwo)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::F64>::fromCpp(jniEnv, c.o_fsixtyfour)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto AssortedPrimitives::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 15);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<AssortedPrimitives>::get();
    return {::djinni::Bool::toCpp(jniEnv, jniEnv->GetBooleanField(j, data.field_b)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_eight)),
            ::djinni::I16::toCpp(jniEnv, jniEnv->GetShortField(j, data.field_sixteen)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_thirtytwo)),
            ::djinni::I64::toCpp(jniEnv, jniEnv->GetLongField(j, data.field_sixtyfour)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_fthirtytwo)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_fsixtyfour)),
            ::djinni::Optional<std::experimental::optional, ::djinni::Bool>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_oB)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I8>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_oEight)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I16>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_oSixteen)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I32>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_oThirtytwo)),
            ::djinni::Optional<std::experimental::optional, ::djinni::I64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_oSixtyfour)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F32>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_oFthirtytwo)),
            ::djinni::Optional<std::experimental::optional, ::djinni::F64>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_oFsixtyfour))};
}

}  // namespace jnins
