// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from duration.djinni

#include "TestDuration.h"  // my header
#include "translation.h"

namespace Cxns {

Platform::String^ TestDuration::HoursString (Windows::Foundation::TimeSpan Dt)
{
    try {
        auto cppRet = ::TestDuration::hoursString(transform<std::chrono::duration<int32_t, std::ratio<3600>>, Windows::Foundation::TimeSpan>()(Dt));
        return transform<std::string, Platform::String^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Platform::String^ TestDuration::MinutesString (Windows::Foundation::TimeSpan Dt)
{
    try {
        auto cppRet = ::TestDuration::minutesString(transform<std::chrono::duration<int32_t, std::ratio<60>>, Windows::Foundation::TimeSpan>()(Dt));
        return transform<std::string, Platform::String^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Platform::String^ TestDuration::SecondsString (Windows::Foundation::TimeSpan Dt)
{
    try {
        auto cppRet = ::TestDuration::secondsString(transform<std::chrono::duration<int32_t, std::ratio<1>>, Windows::Foundation::TimeSpan>()(Dt));
        return transform<std::string, Platform::String^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Platform::String^ TestDuration::MillisString (Windows::Foundation::TimeSpan Dt)
{
    try {
        auto cppRet = ::TestDuration::millisString(transform<std::chrono::duration<int32_t, std::milli>, Windows::Foundation::TimeSpan>()(Dt));
        return transform<std::string, Platform::String^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Platform::String^ TestDuration::MicrosString (Windows::Foundation::TimeSpan Dt)
{
    try {
        auto cppRet = ::TestDuration::microsString(transform<std::chrono::duration<int32_t, std::micro>, Windows::Foundation::TimeSpan>()(Dt));
        return transform<std::string, Platform::String^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Platform::String^ TestDuration::NanosString (Windows::Foundation::TimeSpan Dt)
{
    try {
        auto cppRet = ::TestDuration::nanosString(transform<std::chrono::duration<int32_t, std::nano>, Windows::Foundation::TimeSpan>()(Dt));
        return transform<std::string, Platform::String^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Hours (int32_t Count)
{
    try {
        auto cppRet = ::TestDuration::hours(transform<int32_t, int32_t>()(Count));
        return transform<std::chrono::duration<int32_t, std::ratio<3600>>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Minutes (int32_t Count)
{
    try {
        auto cppRet = ::TestDuration::minutes(transform<int32_t, int32_t>()(Count));
        return transform<std::chrono::duration<int32_t, std::ratio<60>>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Seconds (int32_t Count)
{
    try {
        auto cppRet = ::TestDuration::seconds(transform<int32_t, int32_t>()(Count));
        return transform<std::chrono::duration<int32_t, std::ratio<1>>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Millis (int32_t Count)
{
    try {
        auto cppRet = ::TestDuration::millis(transform<int32_t, int32_t>()(Count));
        return transform<std::chrono::duration<int32_t, std::milli>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Micros (int32_t Count)
{
    try {
        auto cppRet = ::TestDuration::micros(transform<int32_t, int32_t>()(Count));
        return transform<std::chrono::duration<int32_t, std::micro>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Nanos (int32_t Count)
{
    try {
        auto cppRet = ::TestDuration::nanos(transform<int32_t, int32_t>()(Count));
        return transform<std::chrono::duration<int32_t, std::nano>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Hoursf (double Count)
{
    try {
        auto cppRet = ::TestDuration::hoursf(transform<double, double>()(Count));
        return transform<std::chrono::duration<double, std::ratio<3600>>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Minutesf (double Count)
{
    try {
        auto cppRet = ::TestDuration::minutesf(transform<double, double>()(Count));
        return transform<std::chrono::duration<double, std::ratio<60>>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Secondsf (double Count)
{
    try {
        auto cppRet = ::TestDuration::secondsf(transform<double, double>()(Count));
        return transform<std::chrono::duration<double, std::ratio<1>>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Millisf (double Count)
{
    try {
        auto cppRet = ::TestDuration::millisf(transform<double, double>()(Count));
        return transform<std::chrono::duration<double, std::milli>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Microsf (double Count)
{
    try {
        auto cppRet = ::TestDuration::microsf(transform<double, double>()(Count));
        return transform<std::chrono::duration<double, std::micro>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Windows::Foundation::TimeSpan TestDuration::Nanosf (double Count)
{
    try {
        auto cppRet = ::TestDuration::nanosf(transform<double, double>()(Count));
        return transform<std::chrono::duration<double, std::nano>, Windows::Foundation::TimeSpan>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
Platform::IBox<Windows::Foundation::TimeSpan>^ TestDuration::Box (int64_t Count)
{
    try {
        auto cppRet = ::TestDuration::box(transform<int64_t, int64_t>()(Count));
        return transform<std::experimental::optional<std::chrono::duration<int64_t, std::ratio<1>>>, Platform::IBox<Windows::Foundation::TimeSpan>^>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}
int64_t TestDuration::Unbox (Platform::IBox<Windows::Foundation::TimeSpan>^ Dt)
{
    try {
        auto cppRet = ::TestDuration::unbox(transform<std::experimental::optional<std::chrono::duration<int64_t, std::ratio<1>>>, Platform::IBox<Windows::Foundation::TimeSpan>^>()(Dt));
        return transform<int64_t, int64_t>()(cppRet);
    }
    catch(const std::exception& e) {
        throw ref new Platform::Exception(-1, transform<std::string, Platform::String^>()((std::string)e.what()));
    }
}

}  // namespace Cxns
